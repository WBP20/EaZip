name: build-tauri

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build:
    # Le token doit pouvoir écrire pour créer la Release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # 1) macOS ARM (Apple Silicon)
          - os: macos-14
            target: aarch64-apple-darwin

          # 2) macOS Intel (x86_64) — utilisera macos-13 tant qu'il existe
          - os: macos-13
            target: x86_64-apple-darwin

          # 3) Linux amd64
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu

          # 4) Windows x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      # Dépendances système Linux pour Tauri v2 (webkit2gtk 4.1, etc.)
      - name: Install Linux deps (Ubuntu only)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libgtk-3-dev \
            libxdo-dev \
            curl wget file patchelf

      # Node.js (LTS) + cache
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"

      # Rust (stable). On installe les cibles macOS si on est sur un runner macOS,
      # ça accélère les builds multi-arch.
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ startsWith(matrix.os, 'macos-') && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      # Cache des artefacts Rust
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      # Dépendances front
      - name: Install frontend deps
        run: npm ci

      # (Optionnel) build du front si tu ne l'as pas configuré via beforeBuildCommand
      # - run: npm run build

      # Build + publication Release avec l'action officielle Tauri
      - name: Tauri build & release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Remplace si ton projet Tauri n'est pas à la racine
          projectPath: .
          # Ces champs utilisent la version lue depuis tauri.conf.json
          tagName: v__VERSION__
          releaseName: "v__VERSION__"
          releaseBody: "Voir les assets pour télécharger cette version."
          releaseDraft: true
          prerelease: false
          # On force la cible correspondant à la ligne de la matrice
          args: --target ${{ matrix.target }}

      # (Optionnel) Windows : installer NSIS si tu veux forcer ce bundler
      # - name: Install NSIS (Windows only)
      #   if: startsWith(matrix.os, 'windows')
      #   run: choco install -y nsis
